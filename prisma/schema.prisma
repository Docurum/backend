generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(cuid())
  name                     String
  username                 String              @unique
  email                    String              @unique
  password                 String
  isEmailVerified          Boolean             @default(false)
  isAdmin                  Boolean             @default(false)
  picture                  String?
  dob                      DateTime?
  blocked                  Boolean             @default(false)
  isDoctor                 Boolean             @default(false)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  clinicId                 String?
  bio                      String?
  phoneNumber              String?
  Comment                  Comment[]
  doctor                   Doctor?
  DownVoteOnComment        DownVoteOnComment[]
  DownVoteOnTopic          DownVoteOnTopic[]
  Topic                    Topic[]
  UpVoteOnComment          UpVoteOnComment[]
  UpVoteonTopic            UpVoteOnTopic[]
  Clinic                   Clinic?             @relation(fields: [clinicId], references: [id])
  refreshToken             refreshTokens[]
  Pricing                  Pricing[]
  UserHostConsultation     Consultation[]      @relation("UserConsultationHost")
  UserAttendeeConsultation Consultation[]      @relation("UserConsultationAttendee")
}

model Pricing {
  id                String   @id @default(cuid())
  title             String
  description       String?
  imageUrl          String?
  userId            String
  costPerSession    Int
  numberOfSessions  Int
  setRecommended    Boolean  @default(false)
  durationInMinutes Int?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Consultation {
  id                String   @id @default(cuid())
  title             String
  description       String?
  attachment        String[]
  durationInMinutes Int?
  rating            Int?
  isComplete        Boolean  @default(false)
  hostId            String
  host              User     @relation(fields: [hostId], references: [id], onDelete: Cascade, name: "UserConsultationHost")
  attendeeId        String
  attendee          User     @relation(fields: [attendeeId], references: [id], onDelete: Cascade, name: "UserConsultationAttendee")
  userId            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Doctor {
  id                      String   @id @default(cuid())
  isVerified              Boolean  @default(false)
  medicalCouncil          String?
  registrationNumber      String?
  registrationYear        String?
  photoId                 String?
  registrationCertificate String?
  degreeCertificate       String?
  biography               String?
  qualification           String
  title                   String
  speciality              String[]
  experience              Int      @default(0)
  languages               String[]
  contact                 String?  @unique
  hospital                String?
  userId                  String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model emailTokens {
  id        String        @id @default(cuid())
  category  emailCategory
  token     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model refreshTokens {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  animation   Json?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id                String              @id @default(cuid())
  description       Json
  votes             Int                 @default(0)
  upvotes           Int                 @default(0)
  downvotes         Int                 @default(0)
  views             Int                 @default(0)
  shares            Int                 @default(0)
  userId            String
  assetUrl          String[]
  topicId           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categories        String[]
  parent_id         String?
  parent            Comment?            @relation("Comment_Children", fields: [parent_id], references: [id])
  Children          Comment[]           @relation("Comment_Children")
  topic             Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  DownVoteOnComment DownVoteOnComment[]
  UpVoteOnComment   UpVoteOnComment[]
}

model Topic {
  id              String            @id @default(cuid())
  title           String
  description     Json
  votes           Int               @default(0)
  upvotes         Int               @default(0)
  downvotes       Int               @default(0)
  views           Int               @default(0)
  shares          Int               @default(0)
  commentCount    Int               @default(0)
  userId          String
  assetUrl        String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categories      String[]
  comments        Comment[]
  DownVoteOnTopic DownVoteOnTopic[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  UpVoteonTopic   UpVoteOnTopic[]
}

model UpVoteOnTopic {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DownVoteOnTopic {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UpVoteOnComment {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DownVoteOnComment {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Clinic {
  id                 String   @id @default(cuid())
  name               String
  phoneNumber        String
  email              String
  website            String?
  type               String
  registrationNumber String?
  certificate        String?
  address            String
  pincode            String
  city               String
  state              String
  country            String
  services           String[]
  logo               String?
  displayImages      String[]
  adminId            String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employees          User[]
}

enum emailCategory {
  VERIFYMAIL
  RESETPASSWORD
}

model Availability {
  id         String                @id @default(cuid())
  start_date DateTime
  end_date   DateTime
  day        String
  timings    ConsultTimeAndPlace[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model ConsultTimeAndPlace {
  id                  String        @id @default(cuid())
  start_time          String
  end_time            String
  type                String
  location            String
  no_of_consultations Int
  Availability        Availability? @relation(fields: [availabilityId], references: [id])
  availabilityId      String?
}
