generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  username             String                 @unique
  email                String                 @unique
  password             String
  isEmailVerified      Boolean                @default(false)
  isAdmin              Boolean                @default(false)
  picture              String?
  dob                  DateTime?
  blocked              Boolean                @default(false)
  isDoctor             Boolean                @default(false)
  doctor               Doctor?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Topic                Topic[]
  Comment              Comment[]
  refreshToken         refreshTokens[]
  CategoriesOnTopics   CategoriesOnTopics[]
  CategoriesOnComments CategoriesOnComments[]
  Clinic               Clinic?                @relation(fields: [clinicId], references: [id])
  clinicId             String?
}

model Doctor {
  id                      String   @id @default(cuid())
  uuid                    String   @unique
  isVerified              Boolean  @default(false)
  medicalCouncil          String?
  registrationNumber      String?
  registrationYear        String?
  photoId                 String? // photoId for verification
  registrationCertificate String? //Registration Council Certificate
  degreeCertificate       String? //Highest Degree / Diploma certificate
  biography               String?
  qualification           String
  title                   String
  speciality              String[]
  experience              Int      @default(0)
  languages               String[]
  contact                 String?  @unique
  hospital                String?
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model emailTokens {
  id        String        @id @default(cuid())
  category  emailCategory
  token     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum emailCategory {
  VERIFYMAIL
  RESETPASSWORD
}

model refreshTokens {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String                 @id @default(cuid())
  name        String
  description String
  imageUrl    String
  topics      CategoriesOnTopics[]
  Comments    CategoriesOnComments[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model CategoriesOnTopics {
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [assignedBy], references: [id], onDelete: Cascade)
  assignedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([topicId, categoryId])
}

model CategoriesOnComments {
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [assignedBy], references: [id], onDelete: Cascade)
  assignedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([commentId, categoryId])
}

model Comment {
  id          String                 @id @default(cuid())
  description Json
  upvotes     Int?                   @default(0)
  downvotes   Int?                   @default(0)
  views       Int?                   @default(0)
  shares      Int?                   @default(0)
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assetUrl    String[]
  topic       Topic?                 @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  categories  CategoriesOnComments[]
  categoryId  String
}

model Topic {
  id           String               @id @default(cuid())
  title        String
  description  Json
  upvotes      Int?                 @default(0)
  downvotes    Int?                 @default(0)
  views        Int?                 @default(0)
  shares       Int?                 @default(0)
  commentCount Int?                 @default(0)
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  assetUrl     String[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categories   CategoriesOnTopics[]
  comments     Comment[]
}

model Clinic {
  id                 String   @id @default(cuid())
  name               String
  phoneNumber        String
  email              String
  website            String?
  type               String // Personal clinic, Test/Scan Center, Hospital
  registrationNumber String?
  certificate        String?
  address            String
  pincode            String
  city               String
  state              String
  country            String
  services           String[] //blood test, LFT, PFT, X-ray, MRI, USG
  logo               String?
  displayImages      String[]
  employees          User[]
  adminId            String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
