generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String
  username        String          @unique
  email           String          @unique
  password        String
  isEmailVerified Boolean         @default(false)
  isAdmin         Boolean         @default(false)
  picture         String?
  dob             DateTime?
  blocked         Boolean         @default(false)
  isDoctor        Boolean         @default(false)
  doctor          Doctor?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Topic           Topic[]
  Comment         Comment?
  refreshToken    refreshTokens[]
}

model Doctor {
  id            String   @id @default(cuid())
  uuid          String   @unique
  isVerified    Boolean  @default(false)
  biography     String?
  qualification String
  title         String
  speciality    String[]
  experience    Int      @default(0)
  languages     String[]
  contact       String?  @unique
  hospital      String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model emailTokens {
  id        String        @id @default(cuid())
  category  emailCategory
  token     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum emailCategory {
  VERIFYMAIL
  RESETPASSWORD
}

model refreshTokens {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  Comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
}

model Comment {
  id          String     @id @default(cuid())
  description Json
  upvotes     Int        @default(0)
  downvotes   Int        @default(0)
  views       Int        @default(0)
  shares      Int        @default(0)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique
  assetUrl    String[]
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Category    Category[]
}

model Topic {
  id            String     @id @default(cuid())
  title         String
  description   Json
  upvotes       Int        @default(0)
  downvotes     Int        @default(0)
  views         Int        @default(0)
  shares        Int        @default(0)
  commentCount  Int        @default(0)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     @unique
  assetUrl      String[]
  commentIdList String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Category      Category[]
  Comment       Comment[]
}
