generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  phoneNumber        String?             @unique
  id                String              @id @default(cuid())
  name              String
  username          String              @unique
  email             String              @unique
  password          String
  isEmailVerified   Boolean             @default(false)
  isAdmin           Boolean             @default(false)
  picture           String?
  dob               DateTime?
  blocked           Boolean             @default(false)
  isDoctor          Boolean             @default(false)
  doctor            Doctor?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Topic             Topic[]
  Comment           Comment[]
  refreshToken      refreshTokens[]
  Clinic            Clinic?             @relation(fields: [clinicId], references: [id])
  clinicId          String?
  UpVoteonTopic     UpVoteOnTopic[]
  DownVoteOnTopic   DownVoteOnTopic[]
  UpVoteOnComment   UpVoteOnComment[]
  DownVoteOnComment DownVoteOnComment[]
 bio                String?
}

model Doctor {
  id                      String   @id @default(cuid())
  uuid                    String   @unique
  isVerified              Boolean  @default(false)
  medicalCouncil          String?
  registrationNumber      String?
  registrationYear        String?
  photoId                 String? // photoId for verification
  registrationCertificate String? //Registration Council Certificate
  degreeCertificate       String? //Highest Degree / Diploma certificate
  biography               String?
  qualification           String
  title                   String
  speciality              String[]
  experience              Int      @default(0)
  languages               String[]
  contact                 String?  @unique
  hospital                String?
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model emailTokens {
  id        String        @id @default(cuid())
  category  emailCategory
  token     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum emailCategory {
  VERIFYMAIL
  RESETPASSWORD
}

model refreshTokens {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  animation   Json?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id                String              @id @default(cuid())
  description       Json
  votes             Int                 @default(0)
  upvotes           Int                 @default(0)
  downvotes         Int                 @default(0)
  views             Int                 @default(0)
  shares            Int                 @default(0)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  assetUrl          String[]
  topic             Topic?              @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categories        String[]
  Children          Comment[]           @relation("Comment_Children")
  parent            Comment?            @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id         String?
  UpVoteOnComment   UpVoteOnComment[]
  DownVoteOnComment DownVoteOnComment[]
}

model Topic {
  id              String            @id @default(cuid())
  title           String
  description     Json
  votes           Int               @default(0)
  upvotes         Int               @default(0)
  downvotes       Int               @default(0)
  views           Int               @default(0)
  shares          Int               @default(0)
  commentCount    Int               @default(0)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  assetUrl        String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categories      String[]
  comments        Comment[]
  UpVoteonTopic   UpVoteOnTopic[]
  DownVoteOnTopic DownVoteOnTopic[]
}

model UpVoteOnTopic {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownVoteOnTopic {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpVoteOnComment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownVoteOnComment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id                 String   @id @default(cuid())
  name               String
  phoneNumber        String
  email              String
  website            String?
  type               String // Personal clinic, Test/Scan Center, Hospital
  registrationNumber String?
  certificate        String?
  address            String
  pincode            String
  city               String
  state              String
  country            String
  services           String[] //blood test, LFT, PFT, X-ray, MRI, USG
  logo               String?
  displayImages      String[]
  employees          User[]
  adminId            String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
